{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMOqIcc+CrNzxiQ6LxkjRvm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MsNeron/dap-2024/blob/main/les03/lab3.ipyng\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Лабораторная работа № 3 NumPY\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "VT9TIuOfvxXp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 1. Создать массив 10x10 со случайными значениями, найти минимум и максимум"
      ],
      "metadata": {
        "id": "L_COqP9dwI1c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем массив 10x10 со случайными значениями от -100 до 100 с точностью до сотых\n",
        "array = np.round(np.random.uniform(-100, 100, (10, 10)), 2)\n",
        "\n",
        "# Отключаем сокращение вывода массива\n",
        "np.set_printoptions(threshold=np.inf)\n",
        "\n",
        "# Выводим исходный массив целиком\n",
        "print(\"Исходный массив (10x10):\\n\")\n",
        "print(array)\n",
        "\n",
        "# Разделитель для удобства\n",
        "print(\"\\nМинимальные и максимальные значения в каждой строке:\\n\")\n",
        "\n",
        "# Проходим по каждой строке и выводим минимальное и максимальное значения\n",
        "for i, row in enumerate(array):\n",
        "    row_min = np.min(row)  # Минимум в строке\n",
        "    row_max = np.max(row)  # Максимум в строке\n",
        "    print(f\"Строка {i + 1}: Мин: {row_min} | Макс: {row_max}\")\n",
        "\n",
        "# Находим глобальные минимальное и максимальное значение в массиве\n",
        "min_value = np.min(array)\n",
        "max_value = np.max(array)\n",
        "\n",
        "# Выводим глобальные минимальное и максимальное значения\n",
        "print(f\"\\nГлобальное минимальное значение в массиве: {min_value}\")\n",
        "print(f\"Глобальное максимальное значение в массиве: {max_value}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zER69m_KwTPM",
        "outputId": "1973aac2-b8f9-4917-82f2-c67bf4c646ee"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходный массив (10x10):\n",
            "\n",
            "[[-72.84  30.5   35.87 -26.44 -83.96  97.79  25.36  67.26  11.52  91.38]\n",
            " [-51.52  61.3  -82.1   -5.97  71.84 -58.92  16.95  81.69 -57.5  -63.31]\n",
            " [-75.66 -17.75  66.72  92.42 -78.16  30.53  94.75  33.45  52.14 -72.44]\n",
            " [ 14.9  -57.43 -58.23 -76.92 -76.92 -83.4   12.08  -2.7  -35.42  41.48]\n",
            " [-92.13 -61.66  60.37  77.47  -1.98 -63.24  23.77  26.67 -13.04 -30.64]\n",
            " [-43.27 -33.12 -43.74  71.78   7.43 -59.66  47.09 -94.9  -97.06  71.04]\n",
            " [ 11.79 -38.86 -85.38  23.59 -38.35  52.09 -76.11 -15.01  61.4  -37.79]\n",
            " [-45.62 -83.68 -67.98 -62.75   8.7   36.85  42.65 -35.02 -17.59  91.25]\n",
            " [-32.95  88.66 -72.97  68.23  58.86 -51.05 -29.19  25.93   4.05 -64.27]\n",
            " [-99.34 -48.05  73.93 -75.57 -52.36 -49.44  14.09 -70.63  45.13 -68.86]]\n",
            "\n",
            "Минимальные и максимальные значения в каждой строке:\n",
            "\n",
            "Строка 1: Мин: -83.96 | Макс: 97.79\n",
            "Строка 2: Мин: -82.1 | Макс: 81.69\n",
            "Строка 3: Мин: -78.16 | Макс: 94.75\n",
            "Строка 4: Мин: -83.4 | Макс: 41.48\n",
            "Строка 5: Мин: -92.13 | Макс: 77.47\n",
            "Строка 6: Мин: -97.06 | Макс: 71.78\n",
            "Строка 7: Мин: -85.38 | Макс: 61.4\n",
            "Строка 8: Мин: -83.68 | Макс: 91.25\n",
            "Строка 9: Мин: -72.97 | Макс: 88.66\n",
            "Строка 10: Мин: -99.34 | Макс: 73.93\n",
            "\n",
            "Глобальное минимальное значение в массиве: -99.34\n",
            "Глобальное максимальное значение в массиве: 97.79\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 2. Создать 8x8 матрицу и заполнить её единицами и нулями в шахматном порядке"
      ],
      "metadata": {
        "id": "reEdUO7OwfuP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем пустую матрицу 8x8\n",
        "chessboard = np.zeros((8, 8), dtype=int)\n",
        "\n",
        "# Заполняем матрицу единицами и нулями в шахматном порядке\n",
        "for i in range(8):\n",
        "    for j in range(8):\n",
        "        chessboard[i, j] = (i + j) % 2\n",
        "\n",
        "# Выводим результат\n",
        "print(\"Матрица 8x8, заполненная единицами и нулями в шахматном порядке:\")\n",
        "print(chessboard)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jIH-yTLewlRz",
        "outputId": "9750c528-ed4b-4587-e4c6-6aeaf67304ee"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Матрица 8x8, заполненная единицами и нулями в шахматном порядке:\n",
            "[[0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]\n",
            " [0 1 0 1 0 1 0 1]\n",
            " [1 0 1 0 1 0 1 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 3. Дан массив из 11 элементов, поменять знак у элементов, значения которых между 3 и 8"
      ],
      "metadata": {
        "id": "1guoYKokwplu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Исходный массив из 11 элементов\n",
        "array = np.array([1, 4, 7, 2, 9, 3.5, 6, 8, 10, 5, 12])\n",
        "\n",
        "# Выводим исходный массив\n",
        "print(\"Исходный массив:\")\n",
        "print(array)\n",
        "\n",
        "# Меняем знак у элементов, значения которых находятся между 3 и 8\n",
        "array[(array > 3) & (array < 8)] *= -1\n",
        "\n",
        "# Выводим результат\n",
        "print(\"\\nМассив после изменения знаков у элементов между 3 и 8:\")\n",
        "print(array)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "urqhydxdwv0p",
        "outputId": "f51e67ee-73ea-431b-8d76-aecd4e22f022"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходный массив:\n",
            "[ 1.   4.   7.   2.   9.   3.5  6.   8.  10.   5.  12. ]\n",
            "\n",
            "Массив после изменения знаков у элементов между 3 и 8:\n",
            "[ 1.  -4.  -7.   2.   9.  -3.5 -6.   8.  10.  -5.  12. ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 4. Найти среднее заначение строки матрицы и вычесть его из каждого елемента строки"
      ],
      "metadata": {
        "id": "PMB6WGl5w2bc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем случайную матрицу размером 4x4 для примера\n",
        "matrix = np.random.randint(1, 10, (4, 4))\n",
        "\n",
        "# Выводим исходную матрицу\n",
        "print(\"Исходная матрица:\")\n",
        "print(matrix)\n",
        "\n",
        "# Проходим по каждой строке\n",
        "for i in range(matrix.shape[0]):\n",
        "    row_mean = np.mean(matrix[i, :])  # Находим среднее значение строки\n",
        "    matrix[i, :] = matrix[i, :] - row_mean  # Вычитаем среднее значение из каждого элемента строки\n",
        "\n",
        "# Выводим результат\n",
        "print(\"\\nМатрица после вычитания среднего значения строки из её элементов:\")\n",
        "print(matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PLc4pxDMw7eQ",
        "outputId": "f86a794b-b439-4a22-b993-b9d49c8e0179"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходная матрица:\n",
            "[[5 5 6 4]\n",
            " [2 4 9 2]\n",
            " [5 4 6 1]\n",
            " [7 6 8 3]]\n",
            "\n",
            "Матрица после вычитания среднего значения строки из её элементов:\n",
            "[[ 0  0  1 -1]\n",
            " [-2  0  4 -2]\n",
            " [ 1  0  2 -3]\n",
            " [ 1  0  2 -3]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 5. Поменяйте 1 и 2 строки матрицы"
      ],
      "metadata": {
        "id": "pGkUNYUpxFQa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем матрицу z размером 5x5\n",
        "z = np.arange(25).reshape(5, 5)\n",
        "\n",
        "# Выводим исходную матрицу\n",
        "print(\"Исходная матрица:\")\n",
        "print(z)\n",
        "\n",
        "# Меняем местами 1 и 2 строки (индексы 0 и 1)\n",
        "z[[0, 1]] = z[[1, 0]]\n",
        "\n",
        "# Выводим результат после обмена строк\n",
        "print(\"\\nМатрица после обмена 1-й и 2-й строк:\")\n",
        "print(z)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "THK9WEGMxLwP",
        "outputId": "01f50301-509f-47cb-ffd6-5d10d921dbde"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходная матрица:\n",
            "[[ 0  1  2  3  4]\n",
            " [ 5  6  7  8  9]\n",
            " [10 11 12 13 14]\n",
            " [15 16 17 18 19]\n",
            " [20 21 22 23 24]]\n",
            "\n",
            "Матрица после обмена 1-й и 2-й строк:\n",
            "[[ 5  6  7  8  9]\n",
            " [ 0  1  2  3  4]\n",
            " [10 11 12 13 14]\n",
            " [15 16 17 18 19]\n",
            " [20 21 22 23 24]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 6. Дан массив 10x2 подеставлющий собой точки в декартовой системе координат, преобразовать в полярную"
      ],
      "metadata": {
        "id": "J3ThMT08xRdQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем массив 10x2, представляющий собой точки в декартовой системе координат\n",
        "points = np.random.randint(1, 10, (10, 2))\n",
        "\n",
        "# Выводим исходные декартовы координаты\n",
        "print(\"Исходные точки (декартовы координаты):\")\n",
        "print(points)\n",
        "\n",
        "# Преобразуем декартовы координаты в полярные\n",
        "r = np.sqrt(points[:, 0]**2 + points[:, 1]**2)  # Вычисляем радиус\n",
        "theta = np.arctan2(points[:, 1], points[:, 0])  # Вычисляем угол (арктангенс двух переменных)\n",
        "\n",
        "# Объединяем радиус и угол в одном массиве\n",
        "polar_coordinates = np.column_stack((r, theta))\n",
        "\n",
        "# Выводим результат (полярные координаты)\n",
        "print(\"\\nПреобразованные точки (полярные координаты):\")\n",
        "print(polar_coordinates)\n"
      ],
      "metadata": {
        "id": "btnQzspexX4W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Для преобразования точек из декартовой системы координат в полярную систему, необходимо выполнить следующие шаги: Вычислить радиус, который равен расстоянию от точки до начала координат. Вычислить угол 𝜃, который определяется как угол между осью x и линией, соединяющей точку с началом координат.*\n",
        "Для вычисления угла θ применяем функцию np.arctan2(y, x), которая учитывает знаки x и y и возвращает угол в диапазоне от −π до π.\n",
        "Затем объединяем радиусы и углы в одном массиве с помощью np.column_stack((r, theta)). В конце выводим полярные координаты."
      ],
      "metadata": {
        "id": "8xGCM7paxd_A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 7. Заменить максимальный элемент массива на ноль"
      ],
      "metadata": {
        "id": "QZdc5dVoyL84"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем массив из 10 случайных элементов с диапазоном от -50 до 50\n",
        "array = np.random.randint(-50, 50, 10)\n",
        "\n",
        "# Выводим исходный массив\n",
        "print(\"Исходный массив:\")\n",
        "print(array)\n",
        "\n",
        "# Находим максимальный элемент и его индекс\n",
        "max_value = np.max(array)\n",
        "max_index = np.argmax(array)\n",
        "\n",
        "# Выводим максимальный элемент\n",
        "print(f\"\\nМаксимальный элемент: {max_value}\")\n",
        "\n",
        "# Заменяем максимальный элемент на ноль\n",
        "array[max_index] = 0\n",
        "\n",
        "# Выводим результат\n",
        "print(\"\\nМассив после замены максимального элемента на ноль:\")\n",
        "print(array)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eiCv5Sk7ySUu",
        "outputId": "d4e281c4-e137-480c-b471-e01c6c99706d"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходный массив:\n",
            "[-12 -50 -16  41  39 -19   1  31 -50   6]\n",
            "\n",
            "Максимальный элемент: 41\n",
            "\n",
            "Массив после замены максимального элемента на ноль:\n",
            "[-12 -50 -16   0  39 -19   1  31 -50   6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 8. Дан массив, добавить 1 к каждому элементу с индексом, заданным в другом массиве. Добавление производиться только 1 раз"
      ],
      "metadata": {
        "id": "vbZskzH1yYYR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Генерируем случайный исходный массив из 10 элементов в диапазоне от 0 до 50\n",
        "array = np.random.randint(0, 50, 10)\n",
        "\n",
        "# Генерируем массив случайных индексов для изменения (например, 4 случайных индекса без повторений)\n",
        "indices = np.random.choice(range(len(array)), size=4, replace=False)\n",
        "\n",
        "# Выводим исходный массив\n",
        "print(\"Исходный массив:\")\n",
        "print(array)\n",
        "\n",
        "# Выводим массив с индексами\n",
        "print(\"\\nМассив индексов, к элементам которых нужно добавить 1:\")\n",
        "print(indices)\n",
        "\n",
        "# Добавляем 1 к элементам по указанным индексам\n",
        "array[indices] += 1\n",
        "\n",
        "# Выводим результат\n",
        "print(\"\\nМассив после добавления 1 к элементам по указанным индексам:\")\n",
        "print(array)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9WRjFWCnym1A",
        "outputId": "0bffe27c-d955-4fea-95c5-8c499064cd33"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходный массив:\n",
            "[38 49 35 26 42 19 17 26 40 13]\n",
            "\n",
            "Массив индексов, к элементам которых нужно добавить 1:\n",
            "[9 4 0 2]\n",
            "\n",
            "Массив после добавления 1 к элементам по указанным индексам:\n",
            "[39 49 36 26 43 19 17 26 40 14]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 9. Дан вектор [1, 2, 3, 4, 5], построить новый вектор с тремя нулями между каждым значением"
      ],
      "metadata": {
        "id": "0e4HNSyqyx7l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Исходный вектор\n",
        "vector = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "# Задаем количество нулей, которые нужно вставить между каждым элементом\n",
        "num_zeros = 3\n",
        "\n",
        "# Создаем новый вектор нужного размера (размер исходного вектора + нули между элементами)\n",
        "new_size = len(vector) + (len(vector) - 1) * num_zeros\n",
        "new_vector = np.zeros(new_size, dtype=int)\n",
        "\n",
        "# Заполняем новый вектор значениями исходного вектора через каждые num_zeros + 1 элементов\n",
        "new_vector[::num_zeros + 1] = vector\n",
        "\n",
        "# Выводим результат\n",
        "print(\"Исходный вектор:\")\n",
        "print(vector)\n",
        "\n",
        "print(\"\\nНовый вектор с тремя нулями между каждым элементом:\")\n",
        "print(new_vector)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W_HIUonDy33P",
        "outputId": "3522a87d-f762-4f78-8a0a-4ca00b5cef9a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходный вектор:\n",
            "[1 2 3 4 5]\n",
            "\n",
            "Новый вектор с тремя нулями между каждым элементом:\n",
            "[1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 10. Найти ближайшее к заданному значению число в заданном массиве"
      ],
      "metadata": {
        "id": "0Jb0ggqry87v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Генерируем массив из 100 случайных значений в диапазоне от -100 до 100\n",
        "array = np.random.randint(-100, 100, 100)\n",
        "\n",
        "# Заданное значение\n",
        "target_value = 10  # Это значение можно изменить по желанию\n",
        "\n",
        "# Выводим исходный массив и заданное значение\n",
        "print(\"Исходный массив:\")\n",
        "print(array)\n",
        "print(f\"\\nЗаданное значение: {target_value}\")\n",
        "\n",
        "# Находим ближайшее значение в массиве\n",
        "closest_index = np.argmin(np.abs(array - target_value))\n",
        "closest_value = array[closest_index]\n",
        "\n",
        "# Выводим результат\n",
        "print(f\"\\nБлижайшее значение к заданному ({target_value}): {closest_value}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HGFsxHzOzDcM",
        "outputId": "69b760ce-bc6e-44fc-979f-223f9d8d6310"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Исходный массив:\n",
            "[-37  96  73 -88 -26  10  12  79 -95  32 -64  61 -98  91  47 -81 -10 -84\n",
            "  34 -28  91 -96 -72  13 -32  66  66 -23  93 -62 -61  22  -2 -30 -59  72\n",
            " -98  92  -4  -3  98 -57  25 -60  69 -45 -55  99  89 -53 -74  51  67   7\n",
            "   3 -83 -10 -58  51  80 -67 -93 -56 -37  65 -44  29 -89  92  45 -36  41\n",
            "  62  86 -47  13 -94  46 -43 -36  31  69 -88  18 -71 -38 -36  22 -73 -40\n",
            "  65  58 -19  45  15  22  -3 -22 -66  57]\n",
            "\n",
            "Заданное значение: 10\n",
            "\n",
            "Ближайшее значение к заданному (10): 10\n"
          ]
        }
      ]
    }
  ]
}